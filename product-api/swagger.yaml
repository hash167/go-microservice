basePath: /
consumes:
- application/json
definitions:
  ChanDir:
    format: int64
    title: ChanDir represents a channel type's direction.
    type: integer
    x-go-package: reflect
  GenericError:
    description: GenericError is a generic error message returned by a server
    properties:
      message:
        type: string
        x-go-name: Message
    type: object
    x-go-package: product-api/main/data
  Kind:
    description: The zero Kind is not a valid kind.
    format: uint64
    title: A Kind represents the specific kind of type that a Type represents.
    type: integer
    x-go-package: reflect
  Product:
    properties:
      description:
        type: string
        x-go-name: Description
      id:
        format: int64
        type: integer
        x-go-name: ID
      name:
        type: string
        x-go-name: Name
      price:
        format: float
        type: number
        x-go-name: Price
      sku:
        type: string
        x-go-name: SKU
    type: object
    x-go-package: product-api/main/data
  Type:
    description: |-
      Not all methods apply to all kinds of types. Restrictions,
      if any, are noted in the documentation for each method.
      Use the Kind method to find out the kind of type before
      calling kind-specific methods. Calling a method
      inappropriate to the kind of type causes a run-time panic.

      Type values are comparable, such as with the == operator,
      so they can be used as map keys.
      Two Type values are equal if they represent identical types.
    properties:
      Align:
        description: |-
          Align returns the alignment in bytes of a value of
          this type when allocated in memory.
        format: int64
        type: integer
      Bits:
        description: |-
          Bits returns the size of the type in bits.
          It panics if the type's Kind is not one of the
          sized or unsized Int, Uint, Float, or Complex kinds.
        format: int64
        type: integer
      ChanDir:
        $ref: '#/definitions/ChanDir'
      Comparable:
        description: |-
          Comparable reports whether values of this type are comparable.
          Even if Comparable returns true, the comparison may still panic.
          For example, values of interface type are comparable,
          but the comparison will panic if their dynamic type is not comparable.
        type: boolean
      Elem:
        $ref: '#/definitions/Type'
      FieldAlign:
        description: |-
          FieldAlign returns the alignment in bytes of a value of
          this type when used as a field in a struct.
        format: int64
        type: integer
      IsVariadic:
        description: |-
          IsVariadic reports whether a function type's final input parameter
          is a "..." parameter. If so, t.In(t.NumIn() - 1) returns the parameter's
          implicit actual type []T.

          For concreteness, if t represents func(x int, y ... float64), then

          t.NumIn() == 2
          t.In(0) is the reflect.Type for "int"
          t.In(1) is the reflect.Type for "[]float64"
          t.IsVariadic() == true

          IsVariadic panics if the type's Kind is not Func.
        type: boolean
      Key:
        $ref: '#/definitions/Type'
      Kind:
        $ref: '#/definitions/Kind'
      Len:
        description: |-
          Len returns an array type's length.
          It panics if the type's Kind is not Array.
        format: int64
        type: integer
      Name:
        description: |-
          Name returns the type's name within its package for a defined type.
          For other (non-defined) types it returns the empty string.
        type: string
      NumField:
        description: |-
          NumField returns a struct type's field count.
          It panics if the type's Kind is not Struct.
        format: int64
        type: integer
      NumIn:
        description: |-
          NumIn returns a function type's input parameter count.
          It panics if the type's Kind is not Func.
        format: int64
        type: integer
      NumMethod:
        description: |-
          NumMethod returns the number of methods accessible using Method.

          Note that NumMethod counts unexported methods only for interface types.
        format: int64
        type: integer
      NumOut:
        description: |-
          NumOut returns a function type's output parameter count.
          It panics if the type's Kind is not Func.
        format: int64
        type: integer
      PkgPath:
        description: |-
          PkgPath returns a defined type's package path, that is, the import path
          that uniquely identifies the package, such as "encoding/base64".
          If the type was predeclared (string, error) or not defined (*T, struct{},
          []int, or A where A is an alias for a non-defined type), the package path
          will be the empty string.
        type: string
      Size:
        description: |-
          Size returns the number of bytes needed to store
          a value of the given type; it is analogous to unsafe.Sizeof.
        format: uint64
        type: integer
      String:
        description: |-
          String returns a string representation of the type.
          The string representation may use shortened package names
          (e.g., base64 instead of "encoding/base64") and is not
          guaranteed to be unique among types. To test for type identity,
          compare the Types directly.
        type: string
    title: Type is the representation of a Go type.
    type: object
    x-go-package: reflect
  ValidationError:
    description: |-
      Wraps validator field error
      so that we don't expose out to code
    properties:
      ActualTag:
        description: |-
          ActualTag returns the validation tag that failed, even if an
          alias the actual tag within the alias will be returned.
          If an 'or' validation fails the entire or will be returned.

          eg. alias "iscolor": "hexcolor|rgb|rgba|hsl|hsla"
          will return "hexcolor|rgb|rgba|hsl|hsla"
        type: string
      Error:
        description: Error returns the FieldError's message
        type: string
      Field:
        description: |-
          Field returns the fields name with the tag name taking precedence over the
          field's actual name.

          eq. JSON name "fname"
          see StructField for comparison
        type: string
      Kind:
        $ref: '#/definitions/Kind'
      Namespace:
        description: |-
          Namespace returns the namespace for the field error, with the tag
          name taking precedence over the field's actual name.

          eg. JSON name "User.fname"

          See StructNamespace() for a version that returns actual names.

          NOTE: this field can be blank when validating a single primitive field
          using validate.Field(...) as there is no way to extract it's name
        type: string
      Param:
        description: |-
          Param returns the param value, in string form for comparison; this will also
          help with generating an error message
        type: string
      StructField:
        description: |-
          StructField returns the field's actual name from the struct, when able to determine.

          eq.  "FirstName"
          see Field for comparison
        type: string
      StructNamespace:
        description: |-
          StructNamespace returns the namespace for the field error, with the field's
          actual name.

          eq. "User.FirstName" see Namespace for comparison

          NOTE: this field can be blank when validating a single primitive field
          using validate.Field(...) as there is no way to extract its name
        type: string
      Tag:
        description: |-
          Tag returns the validation tag that failed. if the
          validation was an alias, this will return the
          alias name and not the underlying tag that failed.

          eg. alias "iscolor": "hexcolor|rgb|rgba|hsl|hsla"
          will return "iscolor"
        type: string
      Type:
        $ref: '#/definitions/Type'
      Value:
        description: |-
          Value returns the actual field's value in case needed for creating the error
          message
        type: object
    type: object
    x-go-package: product-api/main/data
info:
  description: Documentation for Product API
  title: of Product API
  version: 1.0.0
paths:
  /products:
    get:
      description: Return a list of products from the database
      operationId: listProducts
      responses:
        "200":
          $ref: '#/responses/productsResponse'
      tags:
      - products
    post:
      description: Create a new product
      operationId: createProduct
      parameters:
      - description: |-
          Product data structure to Update or Create.
          Note: the id field is ignored by update and create operations
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/Product'
      responses:
        "200":
          $ref: '#/responses/productResponse'
        "422":
          $ref: '#/responses/errorValidation'
        "501":
          $ref: '#/responses/errorResponse'
      tags:
      - products
    put:
      description: Update a products details
      operationId: updateProduct
      parameters:
      - description: |-
          Product data structure to Update or Create.
          Note: the id field is ignored by update and create operations
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/Product'
      responses:
        "201":
          $ref: '#/responses/noContentResponse'
        "404":
          $ref: '#/responses/errorResponse'
        "422":
          $ref: '#/responses/errorValidation'
      tags:
      - products
  /products/{id}:
    delete:
      description: Update a products details
      operationId: deleteProduct
      parameters:
      - description: The id of the product for which the operation relates
        format: int64
        in: path
        name: id
        required: true
        type: integer
        x-go-name: ID
      responses:
        "201":
          $ref: '#/responses/noContentResponse'
        "404":
          $ref: '#/responses/errorResponse'
        "501":
          $ref: '#/responses/errorResponse'
      tags:
      - products
    get:
      description: Return a list of products from the database
      operationId: listSingleProduct
      parameters:
      - description: The id of the product for which the operation relates
        format: int64
        in: path
        name: id
        required: true
        type: integer
        x-go-name: ID
      responses:
        "200":
          $ref: '#/responses/productResponse'
        "404":
          $ref: '#/responses/errorResponse'
      tags:
      - products
produces:
- application/json
responses:
  errorResponse:
    description: Generic error message returned as a string
    schema:
      $ref: '#/definitions/GenericError'
  errorValidation:
    description: Validation errors defined as an array of strings
    schema:
      $ref: '#/definitions/ValidationError'
  noContentResponse:
    description: No content is returned by this API endpoint
  productResponse:
    description: Data structure representing a single product
    schema:
      $ref: '#/definitions/Product'
  productsResponse:
    description: A list of products
    schema:
      items:
        $ref: '#/definitions/Product'
      type: array
schemes:
- http
swagger: "2.0"
